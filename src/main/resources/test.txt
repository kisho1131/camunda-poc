public CompletableFuture<Map<ProfileDetails, CommentaryDetails>> getCommentariesDetails(
        List<ProfileDetails> profileDetails) {

    Set<Long> pfIds = profileDetails.stream()
            .map(ProfileDetails::getPfId)
            .map(Integer::longValue)
            .collect(Collectors.toSet());

    Long tmId = profileDetails.getFirst().getTmId().longValue();

    // Parallel calls
    CompletableFuture<List<ProfileCommentaryEntity>> commentaryFuture =
            CompletableFuture.supplyAsync(() ->
                    profileCommentaryRepository.findByTmIdAndPfIdIn(tmId, pfIds),
                    executor.graphQlThreadExecutor());

    CompletableFuture<List<WorkflowStatusEntity>> workflowFuture =
            CompletableFuture.supplyAsync(() ->
                    workflowStatusRepository.findAllByUnitIdInAndTmIdAndWfTyp(
                            pfIds.stream().map(Long::intValue).collect(Collectors.toSet()),
                            tmId,
                            WorkflowType.DLY_BS_PF.name()),
                    executor.graphQlThreadExecutor());

    // This one depends on commentaryEntities â†’ chain it
    CompletableFuture<List<UserDao>> userFuture = commentaryFuture.thenApplyAsync(commentaryEntities -> {
        if (Objects.isNull(commentaryEntities) || commentaryEntities.isEmpty()) {
            return Collections.emptyList();
        }
        return userDetailsRepository.getUserDetailsBySoeId(getRequiredSoeIds(commentaryEntities));
    }, executor.graphQlThreadExecutor());

    // Combine all
    return commentaryFuture.thenCombineAsync(workflowFuture, (commentaryEntities, workflowEntities) -> {
        // Mapping after both are done
        return Map.entry(commentaryEntities, workflowEntities);
    }, executor.graphQlThreadExecutor()).thenCombineAsync(userFuture, (entry, userDetails) -> {
        List<ProfileCommentaryEntity> commentaryEntities = entry.getKey();
        List<WorkflowStatusEntity> workflowEntities = entry.getValue();

        if (Objects.isNull(commentaryEntities) || commentaryEntities.isEmpty()) {
            return Map.<ProfileDetails, CommentaryDetails>of();
        }

        List<CommentaryDetails> commentaryDetails = EntityToDtoMapper
                .mapToCommentaryDetailsList(commentaryEntities, userDetails);

        workflowHelper.updateStatusCodes(workflowEntities, commentaryDetails);

        Map<ProfileCommentaryKey, CommentaryDetails> commentaryMap = commentaryDetails.stream()
                .collect(Collectors.toMap(
                        dt -> new ProfileCommentaryKey(dt.getPfId().longValue(),
                                                       dt.getTmId().longValue(),
                                                       dt.getPmfAcctLevel1Cd().longValue(),
                                                       dt.getPmfAcctLevel2Cd().longValue()),
                        Function.identity()
                ));

        return profileDetails.stream()
                .collect(Collectors.toMap(
                        Function.identity(),
                        p -> commentaryMap.getOrDefault(
                                new ProfileCommentaryKey(p.getPfId().longValue(),
                                                         p.getTmId().longValue(),
                                                         p.getPmfAcctLevel1Cd().longValue(),
                                                         p.getPmfAcctLevel2Cd().longValue()),
                                new CommentaryDetails()
                        )
                ));
    }, executor.graphQlThreadExecutor());
}
