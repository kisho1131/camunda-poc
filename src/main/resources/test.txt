import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BusinessCommentaryService {
    private static final Logger log = LoggerFactory.getLogger(BusinessCommentaryService.class);

    private final Executor executor;
    private final ExceptionProfileViewRepository exceptionProfileViewRepository;
    private final BusinessCommentaryRepository businessCommentaryRepository;
    private final UserDetailsRepository userDetailsRepository;

    public BusinessCommentaryService(Executor executor,
                                     ExceptionProfileViewRepository exceptionProfileViewRepository,
                                     BusinessCommentaryRepository businessCommentaryRepository,
                                     UserDetailsRepository userDetailsRepository) {
        this.executor = executor;
        this.exceptionProfileViewRepository = exceptionProfileViewRepository;
        this.businessCommentaryRepository = businessCommentaryRepository;
        this.userDetailsRepository = userDetailsRepository;
    }

    public CompletableFuture<List<BusinessCommentary>> getBusinessCommentaryAsync(Integer tmId, List<Integer> mshLevel4Cds) {
        long start = System.currentTimeMillis();

        CompletableFuture<List<ExceptionProfileView>> exceptionProfilesFuture =
                CompletableFuture.supplyAsync(() -> {
                    log.info("[{}] Starting exceptionProfileViewRepository at {}",
                              Thread.currentThread().getName(), System.currentTimeMillis());
                    List<ExceptionProfileView> result =
                            exceptionProfileViewRepository.findAllByTmIdAndMngdSegLvl4CdIn(tmId, mshLevel4Cds);
                    log.info("[{}] Finished exceptionProfileViewRepository at {} (took {} ms)",
                              Thread.currentThread().getName(), System.currentTimeMillis(),
                              (System.currentTimeMillis() - start));
                    return result;
                }, executor);

        CompletableFuture<List<BusinessCommentaryEntity>> commentaryFuture =
                CompletableFuture.supplyAsync(() -> {
                    log.info("[{}] Starting businessCommentaryRepository at {}",
                              Thread.currentThread().getName(), System.currentTimeMillis());
                    List<BusinessCommentaryEntity> result =
                            businessCommentaryRepository.findAllByTmIdAndMshLevel4CdInAndPmfAcctLvl1CdIn(tmId, mshLevel4Cds, List.of());
                    log.info("[{}] Finished businessCommentaryRepository at {} (took {} ms)",
                              Thread.currentThread().getName(), System.currentTimeMillis(),
                              (System.currentTimeMillis() - start));
                    return result;
                }, executor);

        CompletableFuture<List<UserDao>> usersFuture =
                CompletableFuture.supplyAsync(() -> {
                    log.info("[{}] Starting userDetailsRepository at {}",
                              Thread.currentThread().getName(), System.currentTimeMillis());
                    List<UserDao> result = userDetailsRepository.getUserDetailsBySoeId(Set.of());
                    log.info("[{}] Finished userDetailsRepository at {} (took {} ms)",
                              Thread.currentThread().getName(), System.currentTimeMillis(),
                              (System.currentTimeMillis() - start));
                    return result;
                }, executor);

        return CompletableFuture.allOf(exceptionProfilesFuture, commentaryFuture, usersFuture)
                .thenApply(v -> {
                    List<ExceptionProfileView> profiles = exceptionProfilesFuture.join();
                    List<BusinessCommentaryEntity> commentary = commentaryFuture.join();
                    List<UserDao> users = usersFuture.join();

                    log.info("All DB calls completed in {} ms", (System.currentTimeMillis() - start));
                    return EntityToDtoMapper.mapToBusinessCommentaryList(profiles, commentary, users);
                });
    }
}
