import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { GraphQLService } from './graphql.service';
import { TAB_ACCESS_MAP } from './tab-access-map';

@Injectable({
  providedIn: 'root'
})
export class UserauthService {
  constructor(private graphQLService: GraphQLService) {}

  public fetchUserPrivileges(): Observable<string[]> {
    return this.graphQLService.getUserPrivileges().pipe(
      catchError(errorHandler),
      switchMap(response => {
        if (response && response.data && response.data.userAccessPrivileges) {
          const privilegeCodes = response.data.userAccessPrivileges.map((p: any) => p.privilegeCode);
          return of(privilegeCodes);
        }
        return of([]);
      })
    );
  }

  public getAllowedTabs(privilegeCodes: string[]): string[] {
    return Object.keys(TAB_ACCESS_MAP).filter(tab =>
      TAB_ACCESS_MAP[tab].some(code => privilegeCodes.includes(code))
    );
  }

  public isCheckerFromCodes(privilegeCodes: string[]): Observable<boolean> {
    return of(privilegeCodes.some(code =>
      code === 'FINAL_CNTRL' || // Adjust based on your role mapping
      code === 'BART_READ_ONLY' || // Example mapping, adjust as needed
      code === 'WF_INPUT_CMNT'
    ));
  }

  public isMakerFromCodes(privilegeCodes: string[]): Observable<boolean> {
    return of(privilegeCodes.some(code =>
      code === 'FINAL_CNTRL' || // Adjust based on your role mapping
      code === 'BART_READ_ONLY' || // Example mapping, adjust as needed
      code === 'WF_INPUT_CMNT'
    ));
  }
}

function errorHandler(error: any): Observable<any> {
  console.error('No Data Found', error);
  return of([]);
}

import { inject } from '@angular/core';
import { CanActivateFn, Router, ActivatedRouteSnapshot } from '@angular/router';
import { UserauthService } from './userauth.service';
import { BehaviorSubject, Observable } from 'rxjs';
import { map, take, switchMap } from 'rxjs/operators';
import { TAB_ACCESS_MAP } from './tab-access-map';

export const authGuard: CanActivateFn = (route: ActivatedRouteSnapshot) => {
  const authService = inject(UserauthService);
  const router = inject(Router);

  // Initialize BehaviorSubject to manage privilege state
  const privilegeSubject = new BehaviorSubject<string[]>([]);
  const privileges$ = privilegeSubject.asObservable();

  // Fetch privileges on guard initialization
  authService.fetchUserPrivileges().pipe(
    take(1)
  ).subscribe(privilegeCodes => {
    privilegeSubject.next(privilegeCodes);
  });

  return privileges$.pipe(
    map(privilegeCodes => {
      const allowedTabs = authService.getAllowedTabs(privilegeCodes);
      const requestedTab = route.routeConfig?.path;
      if (allowedTabs.includes(requestedTab)) {
        return true;
      }
      router.navigate(['/unauthorized']);
      return false;
    })
  );
};

ngOnInit(): void {
    this.userAuthService.fetchUserPrivileges().pipe(
      map(privilegeCodes => this.userAuthService.getAllowedTabs(privilegeCodes))
    ).subscribe(allowedTabs => {
      this.filteredTabs = this.tabs.filter(tab => allowedTabs.includes(tab.id.toString()));
    })



      ngOnInit() {
        this.authService.fetchUserPrivileges().pipe(
          switchMap(privilegeCodes => this.authService.isCheckerFromCodes(privilegeCodes))
        ).subscribe(isChecker => this.showChecker = isChecker);
        this.authService.fetchUserPrivileges().pipe(
          switchMap(privilegeCodes => this.authService.isMakerFromCodes(privilegeCodes))
        ).subscribe(isMaker => this.showMaker = isMaker);
      }


import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { catchError, map, switchMap, shareReplay, tap } from 'rxjs/operators';
import { GraphQLService } from './graphql.service';
import { TAB_ACCESS_MAP } from './tab-access-map';

@Injectable({
  providedIn: 'root'
})
export class UserauthService {
  private privilegeSubject = new BehaviorSubject<string[]>([]);
  public privileges$ = this.privilegeSubject.asObservable();
  private fetchPrivileges$ = this.fetchUserPrivileges().pipe(
    shareReplay(1) // Cache the first emission and share it
  );

  constructor(private graphQLService: GraphQLService) {
    // Trigger the fetch and update the subject
    this.fetchPrivileges$.subscribe({
      next: privilegeCodes => this.privilegeSubject.next(privilegeCodes),
      error: err => {
        console.error('Error fetching privileges:', err);
        this.privilegeSubject.next([]); // Fallback to empty array on error
      }
    });
  }

  public fetchUserPrivileges(): Observable<string[]> {
    return this.graphQLService.getUserPrivileges().pipe(
      catchError(errorHandler),
      switchMap(response => {
        if (response && response.data && response.data.userAccessPrivileges) {
          const privilegeCodes = response.data.userAccessPrivileges.map((p: any) => p.privilegeCode);
          return of(privilegeCodes);
        }
        return of([]);
      })
    );
  }

  public getAllowedTabs(): Observable<string[]> {
    return this.privileges$.pipe(
      map(privilegeCodes => Object.keys(TAB_ACCESS_MAP).filter(tab =>
        TAB_ACCESS_MAP[tab].some(code => privilegeCodes.includes(code))
      ))
    );
  }

  public isDashboardAccessible(privilegeCode: string): Observable<boolean> {
    return this.privileges$.pipe(
      map(privilegeCodes => privilegeCodes.includes(privilegeCode))
    );
  }

  public getPrivileges(): Observable<string[]> {
    return this.privileges$;
  }
}

function errorHandler(error: any): Observable<any> {
  console.error('No Data Found', error);
  return of([]);
}




export class UserauthService {
  private userPrivilegeSubject = new BehaviorSubject<string[]>([]);
  public userPrivilege$ = this.userPrivilegeSubject.asObservable();

  private allowedTabsSubject = new BehaviorSubject<string[]>([]);
  public allowedTabs$ = this.allowedTabsSubject.asObservable();

  constructor(private graphqlService: GraphqlService) {}

  public fetchUserPrivileges(): void {
    this.graphqlService
      .getUserPrivileges()
      .pipe(catchError(errorHandler))
      .subscribe((response: any) => {
        if (response && response.data && response.data.userAccessPrivileges) {
          const privileges = response.data.userAccessPrivileges;
          if (privileges) {
            const codes = privileges.map(
              (p: { privilegeCode: any }) => p.privilegeCode
            );

            this.userPrivilegeSubject.next(codes);

            const allowedTabs = Object.keys(TAB_ACCESS_MAP).filter((tab) =>
              TAB_ACCESS_MAP[tab].some((code) => codes.includes(code))
            );

            this.allowedTabsSubject.next(allowedTabs);
          }
        } else {
          console.error('No Data Found');
        }
      });
  }

  public getAllowedTabs(): Observable<string[]> {
    return this.allowedTabs$;
  }
}
