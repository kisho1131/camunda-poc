import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { GraphQLService } from './graphql.service';

// Import the TAB_ACCESS_MAP
import { TAB_ACCESS_MAP } from './tab-access-map';

interface ProfileCode {
  roleName: string;
  privilegeCode: string;
}

@Injectable({
  providedIn: 'root'
})
export class UserauthService {
  private userPrivilegeSubject = new BehaviorSubject<string[]>([]);
  public userPrivileges: Observable<string[]> = this.userPrivilegeSubject.asObservable();

  constructor(private graphQLService: GraphQLService) {}

  public fetchUserPrivileges(): void {
    this.graphQLService.getUserPrivileges()
      .pipe(
        catchError(errorHandler),
        switchMap(response => {
          if (response && response.data && response.data.userAccessPrivileges) {
            const privilegeCodes = response.data.userAccessPrivileges.map((p: ProfileCode) => p.privilegeCode);
            return of(privilegeCodes);
          }
          return of([]);
        })
      )
      .subscribe(privilegeCodes => this.userPrivilegeSubject.next(privilegeCodes));
  }

  public getAllowedTabs(): Observable<string[]> {
    return this.userPrivileges.pipe(
      map(privilegeCodes => {
        return Object.keys(TAB_ACCESS_MAP).filter(tab =>
          TAB_ACCESS_MAP[tab].some(code => privilegeCodes.includes(code))
        );
      })
    );
  }

  public isChecker(): Observable<boolean> {
    return this.userPrivileges.pipe(
      map(privilegeCodes => privilegeCodes.some(code =>
        code === 'FINAL_CNTRL' || // Adjust based on your role mapping
        code === 'BART_READ_ONLY' || // Example mapping, adjust as needed
        code === 'WF_INPUT_CMNT'
      ))
    );
  }

  public isMaker(): Observable<boolean> {
    return this.userPrivileges.pipe(
      map(privilegeCodes => privilegeCodes.some(code =>
        code === 'FINAL_CNTRL' || // Adjust based on your role mapping
        code === 'BART_READ_ONLY' || // Example mapping, adjust as needed
        code === 'WF_INPUT_CMNT'
      ))
    );
  }
}

function errorHandler(error: any): Observable<any> {
  console.error('No Data Found', error);
  return of([]);
}


import { Injectable } from '@angular/core';
import { CanActivate, Router, ActivatedRouteSnapshot } from '@angular/router';
import { UserauthService } from './userauth.service';
import { Observable } from 'rxjs';
import { map, take } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private authService: UserauthService, private router: Router) {}

  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {
    return this.authService.getAllowedTabs().pipe(
      take(1),
      map(allowedTabs => {
        const requestedTab = route.routeConfig?.path;
        if (allowedTabs.includes(requestedTab)) {
          return true;
        }
        this.router.navigate(['/unauthorized']);
        return false;
      })
    );
  }
}

import { Component, OnInit } from '@angular/core';
import { UserauthService } from './userauth.service';

@Component({
  selector: 'app-profile',
  template: `
    <button *ngIf="showChecker">Checker</button>
    <button *ngIf="showMaker">Maker</button>
  `
})
export class ProfileComponent implements OnInit {
  showChecker = false;
  showMaker = false;

  constructor(private authService: UserauthService) {}

  ngOnInit() {
    this.authService.isChecker().subscribe(isChecker => this.showChecker = isChecker);
    this.authService.isMaker().subscribe(isMaker => this.showMaker = isMaker);
  }
}