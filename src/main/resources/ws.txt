import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { GraphQLService } from './graphql.service';
import { TAB_ACCESS_MAP } from './tab-access-map';

@Injectable({
  providedIn: 'root'
})
export class UserauthService {
  constructor(private graphQLService: GraphQLService) {}

  public fetchUserPrivileges(): Observable<string[]> {
    return this.graphQLService.getUserPrivileges().pipe(
      catchError(errorHandler),
      switchMap(response => {
        if (response && response.data && response.data.userAccessPrivileges) {
          const privilegeCodes = response.data.userAccessPrivileges.map((p: any) => p.privilegeCode);
          return of(privilegeCodes);
        }
        return of([]);
      })
    );
  }

  public getAllowedTabs(privilegeCodes: string[]): string[] {
    return Object.keys(TAB_ACCESS_MAP).filter(tab =>
      TAB_ACCESS_MAP[tab].some(code => privilegeCodes.includes(code))
    );
  }

  public isCheckerFromCodes(privilegeCodes: string[]): Observable<boolean> {
    return of(privilegeCodes.some(code =>
      code === 'FINAL_CNTRL' || // Adjust based on your role mapping
      code === 'BART_READ_ONLY' || // Example mapping, adjust as needed
      code === 'WF_INPUT_CMNT'
    ));
  }

  public isMakerFromCodes(privilegeCodes: string[]): Observable<boolean> {
    return of(privilegeCodes.some(code =>
      code === 'FINAL_CNTRL' || // Adjust based on your role mapping
      code === 'BART_READ_ONLY' || // Example mapping, adjust as needed
      code === 'WF_INPUT_CMNT'
    ));
  }
}

function errorHandler(error: any): Observable<any> {
  console.error('No Data Found', error);
  return of([]);
}

import { inject } from '@angular/core';
import { CanActivateFn, Router, ActivatedRouteSnapshot } from '@angular/router';
import { UserauthService } from './userauth.service';
import { BehaviorSubject, Observable } from 'rxjs';
import { map, take, switchMap } from 'rxjs/operators';
import { TAB_ACCESS_MAP } from './tab-access-map';

export const authGuard: CanActivateFn = (route: ActivatedRouteSnapshot) => {
  const authService = inject(UserauthService);
  const router = inject(Router);

  // Initialize BehaviorSubject to manage privilege state
  const privilegeSubject = new BehaviorSubject<string[]>([]);
  const privileges$ = privilegeSubject.asObservable();

  // Fetch privileges on guard initialization
  authService.fetchUserPrivileges().pipe(
    take(1)
  ).subscribe(privilegeCodes => {
    privilegeSubject.next(privilegeCodes);
  });

  return privileges$.pipe(
    map(privilegeCodes => {
      const allowedTabs = authService.getAllowedTabs(privilegeCodes);
      const requestedTab = route.routeConfig?.path;
      if (allowedTabs.includes(requestedTab)) {
        return true;
      }
      router.navigate(['/unauthorized']);
      return false;
    })
  );
};